import { IoClose } from "react-icons/io5";
import { GiHamburgerMenu } from "react-icons/gi";
import { LiaRegistered } from "react-icons/lia";
import { Link } from "react-router-dom";
import { IoLogInOutline } from "react-icons/io5";
import { TbLogout2 } from "react-icons/tb";
import LanguageSwitcher from "../../LanguageSwitcher";
import { useState, useRef, useEffect } from "react";

const LargeScreenLinks = ({
  setIsMenuOpen,
  isMenuOpen,
  ROUTES,
  t,
  logout,
  setDarkMode,
  darkMode,
  i18n,
  user,
  setShowAvatarModal,
}) => {
  const [open, setOpen] = useState(false);
  const dropdownRef = useRef();

  // Закрытие по клику вне
  useEffect(() => {
    function handleClickOutside(e) {
      if (dropdownRef.current && !dropdownRef.current.contains(e.target)) {
        setOpen(false);
      }
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);
  return (
    <nav className="flex items-center justify-between">
      {/* Logo */}

      <img src="/polisem.png" alt="polisem-icon" width={200} />

      {/* Burger button */}
      <div className="lg:hidden text-gray-300">
        <button onClick={() => setIsMenuOpen(!isMenuOpen)}>
          {isMenuOpen ? <IoClose size={28} /> : <GiHamburgerMenu size={28} />}
        </button>
      </div>

      {/* Menu (desktop) */}
      <div className="relative">
      <button
        onClick={() => setOpen((prev) => !prev)}
        className="flex items-center gap-2 px-3 py-2 text-blue-500 hover:text-blue-700 border border-blue-300 rounded-lg"
      >
        ⚙️ {t("menu")}
      </button>

      {open && (
        <div
          ref={dropdownRef}
          className="absolute right-0 mt-2 w-64 bg-white dark:bg-gray-900 shadow-lg rounded-lg z-50 p-4 space-y-3"
        >
          <Link
            to="/register"
            className="block text-blue-500 hover:text-blue-700"
          >
            <LiaRegistered className="inline" /> {t("register")}
          </Link>

          <Link
            to="/login"
            className="block text-blue-500 hover:text-blue-700"
          >
            <IoLogInOutline className="inline" /> {t("login")}
          </Link>

          <div
            onClick={logout}
            className="block text-blue-500 hover:text-blue-700 cursor-pointer"
          >
            <TbLogout2 className="inline" /> {t("logout")}
          </div>

          <LanguageSwitcher i18n={i18n} />

          <div
            onClick={() => {
              setDarkMode(!darkMode);
              setTimeout(() => {
                window.dispatchEvent(new Event("theme-toggled"));
              }, 0);
            }}
            className="cursor-pointer text-blue-500 hover:text-blue-700"
          >
            {darkMode
              ? `🌙 ${t("theme")}: ${t("dark")}`
              : `☀️ ${t("theme")}: ${t("light")}`}
          </div>

          {user && (
            <div className="flex items-center gap-3 pt-2 border-t border-gray-200 dark:border-gray-700 mt-3">
              <img
                src={user.photo}
                alt="user"
                className="w-8 h-8 rounded-full object-cover border border-gray-400"
              />
              <span className="text-gray-700 dark:text-gray-300">
                {user.username}
              </span>
            </div>
          )}
        </div>
      )}
    </div>
    </nav>
  );
};

export default LargeScreenLinks;
