# Generated by Django 5.2.1 on 2025-06-25 05:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2000, verbose_name='Agent')),
            ],
            options={
                'verbose_name': 'Agent',
                'verbose_name_plural': 'Agentler',
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Бренд')),
            ],
            options={
                'verbose_name': 'Бренд',
                'verbose_name_plural': 'Бренды',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, unique=True, verbose_name='kategoriýa')),
            ],
            options={
                'verbose_name': 'kategoriýa',
                'verbose_name_plural': 'kategoriýalar',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2000, verbose_name='Işgär')),
            ],
            options={
                'verbose_name': 'Işgär',
                'verbose_name_plural': 'Işgärler',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Тег')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
            },
        ),
        migrations.CreateModel(
            name='UnitOfMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Единица измерения',
                'verbose_name_plural': 'Единицы измерения',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('photo', models.ImageField(blank=True, default='images/avatar.png', null=True, upload_to='user_photos/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Модель')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.brand', verbose_name='Бренд')),
            ],
            options={
                'verbose_name': 'Модель',
                'verbose_name_plural': 'Модели',
                'unique_together': {('brand', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2000, verbose_name='Partneryn ady')),
                ('type', models.CharField(choices=[('klient', 'Alyjy (Покупатель)'), ('supplier', 'Üpjünçi (Поставщик)'), ('both', 'Alyjy we Üpjünçi (Покупатель и поставщик)')], default='supplier', max_length=20, verbose_name='Partneriň görnüşi')),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='store.agent', verbose_name='Agent')),
            ],
            options={
                'verbose_name': 'Partner',
                'verbose_name_plural': 'Partnerler',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000, verbose_name='Наименование')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('sku', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='Артикул (SKU)')),
                ('qr_code', models.CharField(blank=True, max_length=1000, null=True, verbose_name='QR-код')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Количество')),
                ('purchase_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Цена закупки')),
                ('retail_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Розничная цена')),
                ('wholesale_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Оптовая цена')),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена со скидкой')),
                ('weight', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, verbose_name='Вес (кг)')),
                ('volume', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True, verbose_name='Объём (м³)')),
                ('length', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Длина (см)')),
                ('width', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Ширина (см)')),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Высота (см)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлён')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='store.brand', verbose_name='Бренд')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='store.category', verbose_name='Категория')),
                ('model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='store.model', verbose_name='Модель')),
                ('tags', models.ManyToManyField(blank=True, to='store.tag', verbose_name='Теги')),
                ('base_unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='store.unitofmeasurement', verbose_name='Базовая единица')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
            },
        ),
        migrations.CreateModel(
            name='ProductBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Номер партии')),
                ('quantity', models.PositiveIntegerField(verbose_name='Количество в партии')),
                ('arrival_date', models.DateField(blank=True, null=True, verbose_name='Дата прихода')),
                ('production_date', models.DateField(blank=True, null=True, verbose_name='Дата производства')),
                ('expiration_date', models.DateField(blank=True, null=True, verbose_name='Срок годности')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batches', to='store.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Партия товара',
                'verbose_name_plural': 'Партии товаров',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='products/', verbose_name='Изображение')),
                ('alt_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Альтернативный текст')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='store.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Изображение товара',
                'verbose_name_plural': 'Изображения товаров',
            },
        ),
        migrations.CreateModel(
            name='ProductUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conversion_factor', models.DecimalField(decimal_places=4, help_text='Сколько базовых единиц в 1 этой единице (напр: 1 банка = 18 литров → 18)', max_digits=10)),
                ('is_default_for_sale', models.BooleanField(default=False, help_text='Основная единица для продажи')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='units', to='store.product')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='store.unitofmeasurement')),
            ],
            options={
                'verbose_name': 'ölçeg görnüşi',
                'verbose_name_plural': 'ölçeg görnüşleri',
                'unique_together': {('product', 'unit')},
            },
        ),
    ]
